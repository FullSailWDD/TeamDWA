var app=angular.module("app",["ngRoute"]);app.config(["$interpolateProvider","$routeProvider",function(e,t){e.startSymbol("{[{"),e.endSymbol("}]}"),t.when("/",{templateUrl:"templates/dashboard.html",controller:"getDegreesCtrl"}).when("/getRubrics",{templateUrl:"templates/dashboard.html",controller:"getRubricsCtrl"}).when("/dashboard",{templateUrl:"templates/dashboard.html",controller:"dashboardCtrl"}).when("/addDegree",{templateUrl:"templates/addDegree.html",controller:"addDegreeCtrl"}).when("/addCourse",{templateUrl:"templates/addCourse.html",controller:"addCourseCtrl"}).when("/courseAdded",{templateUrl:"templates/dashboard.html",controller:"dashboardCtrl"}).when("/changeDegree",{templateUrl:"templates/dashboard.html",controller:"changeDegreeCtrl"}).when("/allRubrics",{templateUrl:"templates/viewRubrics.html",controller:"allRubrics"}).when("/addRubric",{templateUrl:"templates/addRubric.html",controller:"rubricCtrl"}).when("/useRubric",{templateUrl:"templates/useRubric.html",controller:"useRubricCtrl"}).when("/createRubric",{templateUrl:"templates/dashboard.html",controller:"rubricCreateCtrl"}).when("/editRubric",{templateUrl:"templates/editRubric.html",controller:"rubricEditCtrl"}).when("/addItem",{templateUrl:"templates/addItem.html",controller:"addItemCtrl"}).otherwise({redirectTo:"/"})}]),app.controller("getDegreesCtrl",["$scope","$rootScope","$http","$routeParams","$location","myService",function(e,t,r,i,c,s){r.post("/getDegrees",e.allDegrees).then(function(e){t.theSession=0,s.addItem(e.data),c.path("/getRubrics")})}]),app.controller("getRubricsCtrl",["$scope","$rootScope","$http","$location",function(e,t,r,i){t.theSession++,r.post("/getRubrics",e.allRubrics).then(function(e){t.rootRubrics=e.data,i.path("/dashboard")})}]),app.controller("dashboardCtrl",["$scope","$rootScope","$http","$routeParams","$location","courseTileGenerator","degreeGenerator","myService",function(e,t,r,i,c,s,o,a){t.theSession++,0==t.reRouteItems&&(t.reRouteItems=1,c.path("/useRubric")),2!=t.theSession&&c.path("/"),e.courses={},r.post("/getDashboard",e.allCourses).then(function(t){e.courseRubrics=e.rootRubrics.rubrics,e.degrees=a.getItem(),e.courses=t.data,e.degreesData=new o(e.degrees),e.courseTile=new s(e.courses.courses)}),e.removeCourse=function(t){e.courseID=t,r.get("/removeCourse/"+e.courseID).then(function(e){c.path("/")})},e.removeDegree=function(t){e.degree=t,r.get("/removeDegree/"+e.degree).then(function(e){c.path("/")})},e.allRubrics=function(e){t.courseID=e,c.path("/allRubrics")},e.rubricSelect=function(e){t.selectedRubric=e,c.path("/useRubric")},e.addRubric=function(e){t.test=e,c.path("/addRubric")},e.changeDegree=function(e){t.test=e}}]),app.controller("addCourseCtrl",["$scope","$rootScope","$http","$routeParams","$location","myService",function(e,t,r,i,c,s){e.newCourse={},e.addCourse=function(){e.newCourse.degreeID=e.test,e.newCourse.degreeID&&(r.post("/addCourseJSON",e.newCourse),c.path("/dashboard"))}}]),app.controller("addDegreeCtrl",["$scope","$rootScope","$http","$routeParams","$location","myService",function(e,t,r,i,c,s){e.newDegree={},e.addDegree=function(){r.post("/addDegreeJSON",e.newDegree),c.path("/")}}]),app.controller("rubricCtrl",["$scope","$rootScope","$http","$routeParams","$location",function(e,t,r,c,s){e.newRubric={},e.createRubric=function(){e.newRubric.courseID=e.test._id;var t=e.newRubric.rubricSections.split(",");for(i=1;i<=t.length;i++)sectionsWeight=Math.round(100/i,2);e.newRubric.sectionWeight=sectionsWeight,e.newRubric.rubricSections=t,r.post("/addRubric",e.newRubric),s.path("/")}}]),app.controller("allRubrics",["$scope","$rootScope","$http","$location",function(e,t,r,i){2!=t.theSession&&i.path("/"),e.rootRubrics,e.courseID,e.rubricSelect=function(e){t.selectedRubric=e,i.path("/useRubric")}}]),app.controller("useRubricCtrl",["$scope","$rootScope","$http","$location",function(e,t,r,c){for(2!=t.theSession&&c.path("/"),e.usedRubric=e.selectedRubric,r.get("/rubricItems/"+e.usedRubric._id).then(function(t){e.rubricItems=t.data}),e.removeItem=function(i){t.reRouteItems=0,e.itemID=i,r.get("/removeItem/"+e.itemID).then(function(e){c.path("/")})},e.editRubric=function(e){t.editRubric=e,c.path("/editRubric")},e.gradeThis=[],i=0;i<e.usedRubric.rubricSections.length;i++){var s={};s.secID=e.usedRubric.rubricSections[i].sectionID,s.secWeight=e.usedRubric.rubricSections[i].sectionWeight,s.scores=[],e.gradeThis.push(s)}e.gradeSelect=function(t,r,c,s){var o=t,a=r,n=c._id,l=s.sectionID;s.sectionWeight;for(i=0;i<e.gradeThis.length;i++)if(e.gradeThis[i].secID===l)if(0===e.gradeThis[i].scores.length){var u={};u.id=n,u.weight=a,u.score=o,e.gradeThis[i].scores.push(u)}else for(j=0;j<e.gradeThis[i].scores.length;j++){if(e.gradeThis[i].scores[j].id!=n){var u={};return u.id=n,u.weight=a,u.score=o,e.gradeThis[i].scores.push(u),e.gradeThis}return e.gradeThis[i].scores[j].score=o,e.gradeThis}},e.gradeRubric=function(){var t=e.gradeThis,r=[],c=[],s=[];for(i=0;i<t.length;i++){for(itemValues=[],x=0;x<t[i].scores.length;x++)itemValues.push(t[i].scores[x].weight/t[i].scores[x].score);c.push(itemValues.reduce(function(e,t){return e+t},0)),s.push(t[i].secWeight/(100*c[i])*100)}var o=0;for(i=0;i<s.length;i++)o+=s[i];e.total=Math.round(o,2);var a=r.reduce(function(e,t){return e+t},0);return a}}]),app.controller("rubricEditCtrl",["$scope","$rootScope","$http","$location",function(e,t,r,i){2!=t.theSession&&i.path("/"),e.edit=!0,e.itemAdd=!0,e.removeSection=function(c,s){t.reRouteItems=0,e.rubricID=c,r.get("/removeSection/"+e.rubricID+"/"+s).then(function(e){i.path("/")})},e.addSection=function(c){t.reRouteItems=0,e.rubricID=c,r.get("/addSection/"+e.rubricID).then(function(e){i.path("/")})},e.deleteRubric=function(t){e.rubricID=t,r.get("/removeRubric/"+e.rubricID).then(function(e){i.path("/")})},e.theEditRubric=function(t){e.edit=!e.edit,e.sectionID=t.rubricSections[0].$$hashKey,r.post("/editRubric",t)},e.addRubricItem=function(r,c){e.itemAdd=!e.itemAdd,t.selectedRubric=r,t.selectedSection=c,e.newItem={},i.path("/addItem")},e.useFromEditRubric=function(e){console.log(e),t.selectedRubric=e,i.path("/useRubric")}}]),app.controller("addItemCtrl",["$scope","$rootScope","$http","$location",function(e,t,r,i){e.newItem={},e.createItem=function(){e.newItem.selectedRubric=e.selectedRubric,e.newItem.selectedSectionID=t.selectedSection.sectionID,i.path("/useRubric"),r.post("/createRubricItem",e.newItem)}}]),app.directive("courseElement",function(){return{restrict:"E",scope:{rubrics:"=",payload:"=",select:"&",callback:"&",allrubrics:"&",remove:"&"},template:'<div class="dashsearchcontainer"><input class="dashsearch" type="text" name="search" size="35" placeholder="Search for a degree or course" ng-model="searchText"></div><div class="dashresults"><ul ng-repeat="course in payload.course | filter:searchText track by $index"><li><img class="delete-course-button" ng-click="remove({id:course._id})" src="./img/x-button.png" /><p class="degreeAbbr">{[{course.degreeAbbr}]}<span class="degreeName">{[{course.degreeName}]}</span></p><p id="courseAbbr" class="courseAbbr">{[{course.courseAbbr}]}<span id="courseName" class="courseName">{[{course.courseName}]}</span></p><p class="rubricnumber">#</p><div class="rubricholder"><p class="rubric" ng-repeat="theRubrics in rubrics" ng-repeat="theRubrics in rubrics" ng-if="course._id == theRubrics.courseID" ng-click="select({rubric: theRubrics})">{[{theRubrics.rubricName}]}</p></div><p class="hideme">{[{course._id}]}</p><p class="hideme">{[{course.degreeID}]}</p><div class="addcontainer"><button class="addrubric" ng-click="callback({course:course})">+</button><img ng-click="allrubrics({courseID: course._id})" class="dots" width="20" src="img/dots.png"></div></li></ul></div>'}}),app.directive("degrees",function(){return{restrict:"E",scope:{payload:"=",callback:"&","delete":"&"},template:'<div class="rightme"><ul ng-repeat="degree in payload.degree[0].degrees track by $index"><li><p ng-click="callback({degree: degree})">{[{degree._id}]}</p><input ng-hide="true" type="text" ng-model="degreeModel.ID" value="{[{degree._id}]}"/><p ng-click="callback({degree: degree})">{[{degree.degreeAbbr}]}</p><p ng-click="callback({degree: degree})">{[{degree.degreeName}]}</p><p ng-click="delete({degreeID: degree._id})">- Delete -</p><br/></li></ul></div>'}}),app.directive("allRubrics",function(){return{restrict:"E",scope:{rubrics:"=",courseid:"=",select:"&"},template:'<div ng-repeat="rubric in rubrics.rubrics"><p ng-click="select({rubric: rubric})"" ng-if="rubric.courseID == courseid">{[{rubric.rubricName}]}</p><br/></div>'}}),app.directive("addItem",function(){return{restrict:"E",scope:{model:"=",callback:"&"},template:'<form><div class="form-group"><label>Item Name</label><input type="text" required="require" class="form-control" name="itemName" ng-model="model.itemName"></div><div class="form-group"><label>Item Description</label><input type="text" required="require" class="form-control" name="sections" ng-model="model.itemDes"></div><div class="form-group"><label>Item Weight</label><input type="number" required="require" class="form-control" name="sections" ng-model="model.itemWeight"><p>combined item weights must equal 100%!</p></div><div class="form-group"><label>Wiki Link</label><input type="text" class="form-control" name="sections" ng-model="model.itemWiki"></div><button ng-click="callback()" class="btn btn-warning btn-lg">Add Item</button></form>'}}),app.directive("addRubrics",function(){return{restrict:"E",scope:{model:"=",callback:"&"},template:'<form ><div class="form-group"><label>Rubric Name</label><input type="text" required="require" class="form-control" name="rubricName" ng-model="model.rubricName"></div><div class="form-group"><p class="warning">Note: Seperate sections with commas</p><label>Rubric Sections</label><input type="text" required="require" class="form-control" name="sections" ng-model="model.rubricSections"></div><button ng-click="callback()" class="btn btn-warning btn-lg">Create Rubric</button></form>'}}),app.directive("useRubric",function(){return{restrict:"E",scope:{payload:"=",items:"=",callback:"&","delete":"&",grade:"&"},template:'<p class="edit-button" ng-click="callback({rubric: payload})"><img src="./img/edit-button.png" class="absolute"/></p><div class="rubric-stuff"><p class="rubric-degree">Degree Name</p><p class="rubric-course">Course Name</p><p class="rubric-name">{[{payload.rubricName}]}</p><div class="rubric-section" ng-repeat="section in payload.rubricSections"><p class="rubric-section-title">{[{section.sectionName}]}<p><p class="section-weight">{[{section.sectionWeight}]}%</p><div ng-repeat="item in items.items track by $index" ng-if="item.sectionID == section.sectionID" class="rubric-item"><div class="rubric-buttons"><ul class="button-list"><li class="button-actual"><button type="button" ng-click="grade({value:100, weight: item.itemWeight, item: item, section: section})">100</button></li><li class="button-actual"><button type="button" ng-click="grade({value:75, weight: item.itemWeight, item: item, section: section})">75</button></li><li class="button-actual"><button type="button" ng-click="grade({value:50, weight: item.itemWeight, item: item, section: section})">50</button></li><li class="button-actual"><button type="button" ng-click="grade({value:25, weight: item.itemWeight, item: item, section: section})">25</button></li><li class="button-actual"><button type="button" ng-click="grade({value:0, weight: item.itemWeight, item: item, section: sction})">0</button></li></ul></div><p class="rubric-item ri-name">{[{item.itemName}]}</p><p ng-click="delete({id:item._id})">-- Delete Item -- </p><p class="rubric-item ri-wiki">{[{item.itemWiki}]}</p><p class="rubric-item ri-desc">{[{item.itemDes}]}</p><p class="rubric-item ri-comment"><div></div><label>Comment</label><br/><input type="text" "class="form-control" name="sections" ng-model="model.itemComment"><span> Done</span></p></div></div></div>'}}),app.directive("editRubric",function(){return{restrict:"E",scope:{payload:"=",item:"&",callback:"&",clicked:"=",editrubric:"&",itemcreate:"&",model:"=",itemadd:"=","delete":"&",section:"&",removesection:"&"},template:'<p class="edit-button" ng-click="callback({rubric: payload})"><img src="./img/done-editing-button.png" class="absolute"/></p><div class="rubric-stuff"><p class="rubric-degree">Degree Name</p><p class="rubric-course">Course Name</p><p class="rubric-delete" ng-click="delete({id: payload._id})">Delete</p><p class="rubric-name" ng-show="clicked">{[{payload.rubricName}]}</p><div class="rubric-name-edit" ng-click="editrubric({rubric: payload})"><img class="rubric-name-edit-edit absolute" src="./img/view-button.png" ng-if="clicked"/><img class="rubric-name-edit-done absolute" src="./img/edit-edit-button.png" ng-if="!clicked"/></div><div class="rubric-name-edit-input" ng-hide="clicked"><input class="rubric-name-edit-input-input" type="text" ng-model="payload.rubricName" placeholder="{[{payload.rubricName}]}"/></div><div class="rubric-section" ng-repeat="section in payload.rubricSections track by $index"><p class="rubric-section-title" ng-show="clicked">{[{section.sectionName}]}</p><div class="rubric-section-edit" ng-click="editrubric({rubric: payload})"></div><div class="rubric-section-edit-input" ng-hide="clicked"><input class="rubric-section-edit-input-input" type="text" ng-model="section.sectionName" placeholder="{[{section.sectionName}]}"/></div><div class="add-item-container" ng-show="itemadd"><p class="add-item" ng-click="item({rubric: payload, rubricSection: section})">Add Item</p><div ng-click="removesection({rubricID: payload._id, sectionID: section.sectionID})"><p>-- Remove Section -- </p></div></div></div><div ng-click="section({rubricID: payload._id})"><p>-- Add Section -- </p></div></div>'}}),app.service("myService",function(){var e=[];this.getItem=function(){var t=localStorage.getItem("data");return e=JSON.parse(t)||e},this.addItem=function(t){e.push(t);var r=JSON.stringify(e);localStorage.setItem("data",r)}}),app.service("sendData",function(){var e=function(e){};return e}),app.service("rubricGenerator",function(){var e=function(e){this.rubric=e||[]};return e}),app.service("degreeGenerator",function(){var e=function(e){this.degree=e||{}};return e}),app.service("courseTileGenerator",function(){var e=function(e){this.course=e||[]};return e});